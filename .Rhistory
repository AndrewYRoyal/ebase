devtools::install_github(
repo = 'aroyal641/ebase',
auth_token = '3ce9aa19be3810ccec74dee2caf4abce04b253b9')
library('devtools')
library('roxygen2')
#### Build
document()
build()
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
#lapply(c('data.table', 'mlr', 'dygraphs'), library, character.only = TRUE)
lapply(c('data.table', 'ebase'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
interval = 'hourly')
ebModelList <- ebModel(ebData, type = 'gboost', option = list(nrounds = c(1:4*100)))
#ebModelList <- ebModel(ebData, 'regression')
predictions <- ebPredict(ebModelList, ebData)
ebSummary(predictions, meterDT)
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
#lapply(c('data.table', 'mlr', 'dygraphs'), library, character.only = TRUE)
lapply(c('data.table', 'ebase', 'mlr'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
#source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
interval = 'hourly')
ebModelList <- ebModel(ebData, type = 'gboost', option = list(nrounds = c(1:4*100)))
#ebModelList <- ebModel(ebData, 'regression')
predictions <- ebPredict(ebModelList, ebData)
ebSummary(predictions, meterDT)
lapply(c('data.table', 'ebase', 'mlr'), library, character.only = TRUE)
devtools::install_github(
repo = 'aroyal641/ebase',
auth_token = '3ce9aa19be3810ccec74dee2caf4abce04b253b9')
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
#lapply(c('data.table', 'mlr', 'dygraphs'), library, character.only = TRUE)
lapply(c('data.table', 'ebase', 'mlr'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
#source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
interval = 'hourly')
ebModelList <- ebModel(ebData, type = 'gboost', option = list(nrounds = c(1:4*100)))
#ebModelList <- ebModel(ebData, 'regression')
predictions <- ebPredict(ebModelList, ebData)
ebSummary(predictions, meterDT)
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
#lapply(c('data.table', 'mlr', 'dygraphs'), library, character.only = TRUE)
lapply(c('data.table', 'ebase', 'mlr'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
#source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
interval = 'hourly')
ebModelList <- ebModel(ebData, type = 'regress', option = list(nrounds = c(1:4*100)))
#ebModelList <- ebModel(ebData, 'regression')
predictions <- ebPredict(ebModelList, ebData)
ebSummary(predictions, meterDT)
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
#### Instructions to install elsewhere:
# install.packages('~/ebase_0.1.0.tar.gz', type = 'source', repos = NULL)
install.packages('plumber')
lapply(c('data.table', 'plumber'), library, character.only = TRUE)
function(msg = ''){
list(msg = paste0('The message is ', msg, "'"))
}
getwd()
wd <- "C:/Users/Andrew/Dropbox/plumber"
setwd(wd)
r <- plumb('R/functions.R')
r$run(port = 8000)
r$run(port = 8000)
lapply(c('data.table', 'plumber'), library, character.only = TRUE)
wd <- "C:/Users/Andrew/Dropbox/plumber"
setwd(wd)
r <- plumb('R/functions.R')
r$run(port = 8000)
lapply(c('data.table', 'plumber'), library, character.only = TRUE)
wd <- "C:/Users/Andrew/Dropbox/plumber"
setwd(wd)
r <- plumb('R/functions.R')
r$run(port = 8000)
r$run(port = 8000)
users <- data.frame(
uid=c(12,13),
username=c("kim", "john")
)
#* Lookup a user
#* @get /users/<id>
function(id){
subset(users, uid==id)
}
lapply(c('data.table', 'plumber'), library, character.only = TRUE)
wd <- "C:/Users/Andrew/Dropbox/plumber"
setwd(wd)
r <- plumb('R/functions.R')
r$run(port = 8000)
library('devtools')
library('roxygen2')
#### Build
document()
build()
#### Instructions to install elsewhere:
# install.packages('~/ebase_0.1.0.tar.gz', type = 'source', repos = NULL)
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages')
lapply(c('data.table', 'mlr', 'TSclust'), library, character.only = TRUE)
# library('ebase')
rm(list = ls())
source('ebase/ebase/R/functions.R')
source('ebase/ebase/R/gboost.R')
source('ebase/ebase/R/regression.R')
useDT <- fread('input/useHourly.csv')
#useDT <- fread('input/useDaily.csv')
setnames(useDT, 'elct', 'use')
meterDT <- fread('input/meter.csv')
propDT <- fread('input/property.csv')
useDT[, date:= as.POSIXct(date, format = '%Y-%m-%dT%H', tz = 'UTC')]
meterDT[, inDate:= as.POSIXct(inDate, format = '%Y-%m-%dT%H', tz = 'UTC')]
dataList <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 365,
perf.length = 500,
padding = 15,
interval = 'hourly')
dissList <- lapply(dataList$baseline, ebDissCalc)
clustList <- lapply(dissList, ebCluster)
plotList <- lapply(dataList$meterDict, function(meter){
ebOutlierPlot(dissM = dissList[[meter]],
dat = dataList$performance[[meter]],
clustObj = clustList[[meter]])
})
dissList <- lapply(dataList$baseline, ebDissCalc)
clustList <- lapply(dissList, ebCluster)
plotList <- lapply(dataList$meterDict, function(meter){
ebOutlierPlot(dissM = dissList[[meter]],
dat = dataList$performance[[meter]],
clustObj = clustList[[meter]])
})
Start <- Sys.time()
library('devtools')
library('roxygen2')
#### Build
document()
build()
#### Instructions to install elsewhere:
# install.packages('~/ebase_0.1.0.tar.gz', type = 'source', repos = NULL)
library('devtools')
library('roxygen2')
#### Build
document()
build()
#### Instructions to install elsewhere:
# install.packages('~/ebase_0.1.0.tar.gz', type = 'source', repos = NULL)
library('devtools')
library('roxygen2')
#### Build
document()
build()
#### Instructions to install elsewhere:
# install.packages('~/ebase_0.1.0.tar.gz', type = 'source', repos = NULL)
library('devtools')
library('roxygen2')
#### Build
document()
install.packages('roxygen2')
library('devtools')
library('roxygen2')
#### Build
document()
build()
install.packages("rmarkdown")
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
#### Instructions to install elsewhere:
# install.packages('~/ebase_0.1.0.tar.gz', type = 'source', repos = NULL)
nchar('list(list(c(-117.117349320382, -117.117349645917, -117.117497649695, -117.117640796908, -117.117827068306, -117.117829263262, -117.1178332264, -117.117837256868, -117.117841360358, -117.117845')
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
library('devtools')
library('roxygen2')
#### Build
document()
build()
