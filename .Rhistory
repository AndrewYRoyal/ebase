devtools::install('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase_0.1.0.tar.gz')
devtools::install('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase_0.1.0.tar.gz')
install.packages('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase_0.1.0.tar.gz', type = 'source', repos = NULL)
library('ebase')
.libPaths()
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = TRUE,
padding = 30)
Sys.time() - startTime
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = TRUE,
padding = 30)
Sys.time() - startTime
summary(bList)
#' Model Summary Table
#' @import data.table
#' @import stats
#' @export
summary.baseline <- function(x, oHours = NULL){
meterDT <- copy(x$meterDT)
predDT <- copy(x$predictions)
if(!('MLpElct' %in% names(predDT))) predDT[, MLpElct:= NA]
R2 <- function(actual, predicted) round(1 - sum((actual - predicted)^2)/
sum((actual - mean(actual))^2), 2)
CVRMSE <- function(actual, predicted) round(100*sqrt(mean((actual - predicted)^2))/
mean(actual), 0)
NMBE <- function(actual, predicted) format(100*sum(predicted - actual)/
sum(actual), digits = 1)
sumMeterDT <- merge(
meterDT,
predDT[period == 'baseline',
list(
R2_GB = R2(elct, MLpElct),
R2_R = R2(elct, pElct),
CVRMSE_GB = CVRMSE(elct, MLpElct),
CVRMSE_R = CVRMSE(elct, pElct),
NMBE_GB = NMBE(elct, MLpElct),
NMBE_R = NMBE(elct, pElct),
baselineDays = round(.N/24, 0),
`Annual kWh` = sum(elct)),
by = .(meterID)],
by = 'meterID')
sumMeterDT <- merge(
sumMeterDT,
predDT[period == 'performance',
list(
Savings_GB = sum(MLpElct - elct),
Savings_R = sum(pElct - elct),
performanceDays = round(.N/24, 0)),
by = .(meterID)],
by = 'meterID')
sumPropertyDT <- NA
if('propertyName' %in% names(meterDT)){
sumPropertyDT <- merge(
meterDT,
predDT,
by = 'meterID')[period == 'baseline',
lapply(
list(elct = elct, pElct = pElct, MLpElct = MLpElct),
sum),
by = .(propertyName, date, hr)]
sumPropertyDT <-
sumPropertyDT[,
list(
R2_GB = R2(elct, MLpElct),
R2_R = R2(elct, pElct),
CVRMSE_GB = CVRMSE(elct, MLpElct),
CVRMSE_R = CVRMSE(elct, pElct),
NMBE_GB = NMBE(elct, MLpElct),
NMBE_R = NMBE(elct, pElct)),
by = .(propertyName)]
sumPropertyDT <- merge(
sumPropertyDT,
merge(
sumMeterDT[, .(meterID, Savings_R, Savings_GB)],
meterDT[, .(propertyName, meterID)])[, list(Savings_GB = sum(Savings_GB),
Savings_R = sum(Savings_R)),
by = .(propertyName)],
by = 'propertyName')
}
# for(r in names(uFunList)) modelDT[meterID == r, Frac_U:= round(100*uFunList[[r]](m = baseDays*24, t = 1, f = 0.05), 0)]
# modelDT <- merge(modelDT, x$trend[variable == 'est', .(meterID, YoY = round(100*value))],
#                  by = 'meterID')
# if(is.data.table(x$NRAdjust)){
#   modelDT <- merge(modelDT, x$NRAdjust[variable == 'est', .(meterID, NRA = round(100*value))],
#                    by = 'meterID', all.x = TRUE)
# }
return(list(
summaryMeter = sumMeterDT[,
.(meterID, Savings_GB, Savings_R, CVRMSE_GB, CVRMSE_R, R2_GB, R2_R,
baselineDays, performanceDays)],
summaryProperty = sumPropertyDT[,
.(propertyName, Savings_GB, Savings_R, CVRMSE_GB, CVRMSE_R,
R2_GB, R2_R)]))
}
summary(bList)
truncated_savings(bList)
