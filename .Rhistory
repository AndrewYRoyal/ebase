property = propertySave))
}
truncated_savings(bList)
x <- truncated_savings(bList)
x[!is.na(oStart), ]
y <- x[is.na(oStart) | hr > oStart | hr < oEnd, ]
y
y[meterID == 'J', ]
opHourV <- function(start, end) unique(c(seq(start, pmin(end, 11)), seq(0, end)))
#' Truncated Savings
#' @import data.table
#' @import stats
#' @export
truncated_savings <- function(x){
if(length(setdiff(c('oStart', 'oEnd'), names(x$meterDT))) > 1) stop('No oStart or oEnd in meterDT.')
opHour <- function(start, end) unique(c(seq(start, pmin(end, 11)), seq(0, end)))
meterSave <- merge(
x$meterDT[, .(meterID, propertyName, oStart, oEnd)],
x$predictions[period == 'performance', ],
by = 'meterID')[is.na(oStart) | (hr %in% opHourV(oStart, oEnd)),
list(
TSavings_GB = sum(MLpElct - elct),
TSavings_R = sum(pElct - elct)),
by = .(meterID, propertyName)]
propertySave <- meterSave[, lapply(
list(TSavings_R = TSavings_R, TSavings_GB = TSavings_GB),
sum),
by = .(propertyName)]
return(list(
meter = meterSave[, .(meterID, TSavings_GB, TSavings_R)],
property = propertySave))
}
truncated_savings(bList)
source('R/mainFunctions.R')
truncated_savings(bList)
source('R/mainFunctions.R')
truncated_savings(bList)
source('R/mainFunctions.R')
truncated_savings(bList)
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
summary(bList)
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = TRUE)
Sys.time() - startTime
summary(bList)
truncated_savings(bList)
truncated_savings(bList)
x <- truncated_savings(bList)
x
x
#' Truncated Savings
#' @import data.table
#' @import stats
#' @export
truncated_savings <- function(x){
if(length(setdiff(c('oStart', 'oEnd'), names(x$meterDT))) > 1) stop('No oStart or oEnd in meterDT.')
opHour <- function(hr, start, end) hr %in% unique(c(seq(start, min(end, 23)), seq(0, end)))
meterSave <- merge(
x$meterDT[, .(meterID, propertyName, oStart, oEnd)],
x$predictions[period == 'performance', ],
by = 'meterID')
meterSave[is.na(oStart), c('oStart', 'oEnd'):= list(0, 23)]
meterSave[, operating:= mapply(opHour, hr = hr, start = oStart, end = oEnd)]
return(meterSave)
meterSave <- meterSave[operating == TRUE, list(
TSavings_GB = sum(MLpElct - elct),
TSavings_R = sum(pElct - elct)),
by = .(meterID, propertyName)]
propertySave <- meterSave[, lapply(
list(TSavings_R = TSavings_R, TSavings_GB = TSavings_GB),
sum),
by = .(propertyName)]
return(list(
meter = meterSave[, .(meterID, TSavings_GB, TSavings_R)],
property = propertySave))
}
summary(bList)
x <- truncated_savings(bList)
x
x
x[!operating, ]
x[operating == FALSE, ]
#' Truncated Savings
#' @import data.table
#' @import stats
#' @export
truncated_savings <- function(x){
if(length(setdiff(c('oStart', 'oEnd'), names(x$meterDT))) > 1) stop('No oStart or oEnd in meterDT.')
opHour <- function(hr, start, end) hr %in% unique(c(seq(start, min(end, 23)), seq(0, end)))
meterSave <- merge(
x$meterDT[, .(meterID, propertyName, oStart, oEnd)],
x$predictions[period == 'performance', ],
by = 'meterID')
meterSave[is.na(oStart), c('oStart', 'oEnd'):= list(0, 23)]
meterSave[, operating:= mapply(opHour, hr = hr, start = oStart, end = oEnd)]
meterSave <- meterSave[operating == TRUE, list(
TSavings_GB = sum(MLpElct - elct),
TSavings_R = sum(pElct - elct)),
by = .(meterID, propertyName)]
propertySave <- meterSave[, lapply(
list(TSavings_R = TSavings_R, TSavings_GB = TSavings_GB),
sum),
by = .(propertyName)]
return(list(
meter = meterSave[, .(meterID, TSavings_GB, TSavings_R)],
property = propertySave))
}
summary(bList)
truncated_savings(bList)
plot.baseline <- function(x, ...){
meterV <- unique(x$predictions[, meterID]); names(meterV) <- meterV
inputDT <- x$predictions[, list(Actual = sum(elct), Predicted = sum(pElct)), by = .(meterID, date, period)]
inputDT <- melt(inputDT, id.vars = c('meterID', 'date', 'period'), variable.name = 'type', value.name = 'use')
#inputDT <- inputDT[, .SD, by = .(year(date), month(date), mday(date), date = date)]
inputDT[, c('period', 'type'):= lapply(list(period, type), as.factor)]
profileList <- lapply(meterV, function(r){
plotDT <- inputDT[meterID == r, ]
# breaksV <- as.Date(seq(min(plotDT[, date], na.rm = TRUE), max(plotDT[, date], na.rm = TRUE), by = 'month'))
# labelsV <- month.abb[month(breaksV)]
plotDT[, date:= as.Date(date)]
ggplot(data = plotDT, aes(x = date, y = use, color = period, linetype = type)) +
theme_light(base_size = 12) +
theme(axis.text = element_text(angle = 40), legend.position = 'bottom',
legend.text = element_text(size = 12)) +
geom_line() +
scale_color_manual('Year', values = c('steelblue1', 'royalblue1', 'royalblue4')) +
scale_linetype_manual('', values = c(1, 3)) +
scale_y_continuous('Daily kWh') +
scale_x_date('Date') +
# scale_x_date('Date', breaks = breaksV, labels = labelsV) +
# geom_vline(aes(xintercept = as.numeric(date), color = year), linetype = 2,
#            data = plotDT[postECM == 0, ][which.max(date)]) +
ggtitle('Actual vs. Predicted Consumption', paste0('Meter ', r))
})
return(profileList)
}
plot(bList)
unique(bList$predictions[, period])
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = FALSE,
padding = 10)
Sys.time() - startTime
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = FALSE,
padding = 10)
Sys.time() - startTime
x <- plot(bList)
x$I
x$J
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = FALSE,
padding = 30)
Sys.time() - startTime
x <- plot(bList)
x$I
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = FALSE,
padding = 30)
Sys.time() - startTime
x <- plot(bList)
x$I
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = FALSE,
padding = 30)
Sys.time() - startTime
x <- plot(bList)
x$I
x$I
x
x$L
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = FALSE,
padding = 30)
Sys.time() - startTime
x <- plot(bList)
x$I
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = FALSE,
padding = 30)
Sys.time() - startTime
x <- plot(bList)
x$I
plot.baseline <- function(x, ...){
meterV <- unique(x$predictions[, meterID]); names(meterV) <- meterV
inputDT <- x$predictions[, list(
Actual = sum(elct),
Predicted = sum(pElct)),
by = .(meterID, date, period)]
inputDT <- melt(inputDT,
id.vars = c('meterID', 'date', 'period'),
variable.name = 'type', value.name = 'use')
inputDT[, c('period', 'type'):= lapply(list(period, type), as.factor)]
profileList <- lapply(meterV, function(r){
plotDT <- inputDT[meterID == r, ]
plotDT[, date:= as.Date(date)]
ggplot(data = plotDT, aes(x = date, y = use, color = period, linetype = type)) +
theme_light(base_size = 12) +
theme(axis.text = element_text(angle = 40), legend.position = 'bottom',
legend.text = element_text(size = 12)) +
geom_line() +
scale_color_manual('Period', values = c('red', 'gray35', 'royalblue')) +
scale_linetype_manual('', values = c(1, 3)) +
scale_y_continuous('Daily kWh') +
scale_x_date('Date') +
# scale_x_date('Date', breaks = breaksV, labels = labelsV) +
# geom_vline(aes(xintercept = as.numeric(date), color = year), linetype = 2,
#            data = plotDT[postECM == 0, ][which.max(date)]) +
ggtitle('Actual vs. Predicted Consumption', paste0('Meter ', r))
})
return(profileList)
}
x <- plot(bList)
x$I
plot.baseline <- function(x, ...){
meterV <- unique(x$predictions[, meterID]); names(meterV) <- meterV
inputDT <- x$predictions[, list(
Actual = sum(elct),
Predicted = sum(pElct)),
by = .(meterID, date, period)]
inputDT <- melt(inputDT,
id.vars = c('meterID', 'date', 'period'),
variable.name = 'type', value.name = 'use')
inputDT[, c('period', 'type'):= lapply(list(period, type), as.factor)]
profileList <- lapply(meterV, function(r){
plotDT <- inputDT[meterID == r, ]
plotDT[, date:= as.Date(date)]
ggplot(data = plotDT, aes(x = date, y = use, color = period, linetype = type)) +
theme_light(base_size = 12) +
theme(axis.text = element_text(angle = 40), legend.position = 'bottom',
legend.text = element_text(size = 12)) +
geom_line() +
scale_color_manual('Period', values = c('black', 'gray45', 'royalblue')) +
scale_linetype_manual('', values = c(1, 3)) +
scale_y_continuous('Daily kWh') +
scale_x_date('Date') +
# scale_x_date('Date', breaks = breaksV, labels = labelsV) +
# geom_vline(aes(xintercept = as.numeric(date), color = year), linetype = 2,
#            data = plotDT[postECM == 0, ][which.max(date)]) +
ggtitle('Actual vs. Predicted Consumption', paste0('Meter ', r))
})
return(profileList)
}
x <- plot(bList)
x$I
plot.baseline <- function(x, ...){
meterV <- unique(x$predictions[, meterID]); names(meterV) <- meterV
inputDT <- x$predictions[, list(
Actual = sum(elct),
Predicted = sum(pElct)),
by = .(meterID, date, period)]
inputDT <- melt(inputDT,
id.vars = c('meterID', 'date', 'period'),
variable.name = 'type', value.name = 'use')
inputDT[, c('period', 'type'):= lapply(list(period, type), as.factor)]
profileList <- lapply(meterV, function(r){
plotDT <- inputDT[meterID == r, ]
plotDT[, date:= as.Date(date)]
ggplot(data = plotDT, aes(x = date, y = use, color = period, linetype = type)) +
theme_light(base_size = 12) +
theme(axis.text = element_text(angle = 40), legend.position = 'bottom',
legend.text = element_text(size = 12)) +
geom_line() +
scale_color_manual('Period', values = c('black', 'gray45', 'royalblue')) +
scale_linetype_manual('', values = c(1, 3)) +
scale_y_continuous('Daily kWh') +
scale_x_date('Date') +
# scale_x_date('Date', breaks = breaksV, labels = labelsV) +
geom_vline(aes(xintercept = as.numeric(date)), linetype = 2,
data = plotDT[period == 'install', ][which.max(date)]) +
ggtitle('Actual vs. Predicted Consumption', paste0('Meter ', r))
})
return(profileList)
}
x <- plot(bList)
x$I
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = FALSE,
padding = 30)
Sys.time() - startTime
x <- plot(bList)
x$I
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = TRUE,
padding = 30)
Sys.time() - startTime
x <- plot(bList, gboost = TRUE)
x$I
lapply(c('data.table', 'lfe', 'ggplot2', 'xgboost', 'ggthemes'), library, character.only = TRUE)
rm(list = ls())
source('R/mainFunctions.R')
source('R/helperFunctions.R')
#library('ebase')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = install_date,
propertyName = 'Playboy Mansion')])
meterDT[meterID == 'J', c('oStart', 'oEnd'):= list(1, 5)]
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# Get model
startTime <- Sys.time()
bList <- baselineModel(useDT = useDT,
meterDT = meterDT,
base.length = 12,
date.format = '%m/%d/%Y',
gboost = TRUE,
padding = 30)
Sys.time() - startTime
x <- plot(bList, gboost = TRUE)
x$I
library('devtools')
library('roxygen2')
#### Build
document()
build()
#### Instructions to install elsewhere:
# install.packages('~/ebase_0.1.0.tar.gz', type = 'source', repos = NULL)
