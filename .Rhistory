sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
perf.min = 20,
interval = 'hourly')
ebData
#ebModelList <- ebModel(ebDT, type = 'GBoost')
ebModelList <- ebModel(ebData)
predictions <- ebPredict(ebModelList, ebData)
ebSummary(predictions, meterDT)
ebSummary(predictions, meterDT)
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
lapply(c('data.table', 'mlr'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
perf.min = 20,
interval = 'hourly')
ebData
#ebModelList <- ebModel(ebDT, type = 'GBoost')
ebModelList <- ebModel(ebData)
predictions <- ebPredict(ebModelList, ebData)
ebSummary(predictions, meterDT)
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
lapply(c('data.table', 'mlr'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
perf.min = 20,
interval = 'hourly')
ebData
#ebModelList <- ebModel(ebDT, type = 'GBoost')
ebModelList <- ebModel(ebData)
predictions <- ebPredict(ebModelList, ebData)
ebSummary(predictions, meterDT)
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
lapply(c('data.table', 'mlr'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
perf.min = 20,
interval = 'hourly')
ebData
#ebModelList <- ebModel(ebDT, type = 'GBoost')
ebModelList <- ebModel(ebData, 'gboost')
ebModelList
ebData$J
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
lapply(c('data.table', 'mlr'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
perf.min = 20,
interval = 'hourly')
ebData
#ebModelList <- ebModel(ebDT, type = 'GBoost')
ebModelList <- ebModel(ebData, 'gboost')
ebModelList
ebModelList
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
lapply(c('data.table', 'mlr'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
perf.min = 20,
interval = 'hourly')
ebData
#ebModelList <- ebModel(ebDT, type = 'GBoost')
ebModelList <- ebModel(ebData, 'gboost')
ebModelList
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
lapply(c('data.table', 'mlr'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
perf.min = 20,
interval = 'hourly')
ebData
#ebModelList <- ebModel(ebDT, type = 'GBoost')
ebModelList <- ebModel(ebData, 'gboost')
ebModelList
predict.gboost <- function(x, dat){
if(!dat$model) return(NA)
dat <- copy(dat$dat)
dat[, pElct:= predict(x,
newdata = as.data.frame(
x[, -c('meterID', 'elct', 'date', 'period')]))$data$response)]
dat[, .(meterID, date, period, elct, pElct)]
}
predict.gboost <- function(x, dat){
if(!dat$model) return(NA)
dat <- copy(dat$dat)
dat[, pElct:= predict(x,
newdata = as.data.frame(
x[, -c('meterID', 'elct', 'date', 'period')]))$data$response)]
dat[, .(meterID, date, period, elct, pElct)]
}
predict.gboost <- function(x, dat){
if(!dat$model) return(NA)
dat <- copy(dat$dat)
dat[, pElct:= predict(x,
newdata = as.data.frame(
dat[, -c('meterID', 'elct', 'date', 'period')]))$data$response)]
dat[, .(meterID, date, period, elct, pElct)]
}
predict.gboost <- function(x, dat){
if(!dat$model) return(NA)
dat <- copy(dat$dat)
dat[, pElct:= predict(x, newdata = as.data.frame(
dat[, -c('meterID', 'elct', 'date', 'period')]))$data$response]
dat[, .(meterID, date, period, elct, pElct)]
}
predictions <- ebPredict(ebModelList, ebData)
predictions
ebModelList
ebData$J$model
predict.gboost <- function(x, dat){
if(!dat$model) return(NA)
dat <- copy(dat$dat)
dat[, pElct:= predict(x, newdata = as.data.frame(
dat[, -c('meterID', 'elct', 'date', 'period')]))$data$response]
dat[, .(meterID, date, period, elct, pElct)]
}
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
lapply(c('data.table', 'mlr'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
perf.min = 20,
interval = 'hourly')
ebData
#ebModelList <- ebModel(ebDT, type = 'GBoost')
ebModelList <- ebModel(ebData, 'gboost')
ebModelList
predictions <- ebPredict(ebModelList, ebData)
predictions
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
lapply(c('data.table', 'mlr'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
perf.min = 20,
interval = 'hourly')
ebData
#ebModelList <- ebModel(ebDT, type = 'GBoost')
ebModelList <- ebModel(ebData, 'gboost')
ebModelList
predictions <- ebPredict(ebModelList, ebData)
predictions
ebSummary(predictions, meterDT)
ebModelList
predictions
ebSummary(predictions, meterDT)
predictions
predictions
predictions$J
predictions$I
predictions
class(predictions)
class(predictions$J)
predcitions
predictions
dat <- predictions$J
predictions$J
dat <- copy(predictions$J)
dat
ebPlot <- function(x){
dat <- copy(x)
setnames(dat, c('elct', 'pElct'), c('Actual', 'Predicted'))
datesV <- c(
min(dat[period == 'baseline', date]),
max(dat[period == 'baseline', date]),
min(dat[period == 'performance', date]),
max(dat[period == 'performance', date]))
dygraph(dat[, .(date, Actual, Predicted)], ylab = 'Daily kWh') %>%
dySeries("Actual", stepPlot = TRUE, fillGraph = TRUE, color = '#4889ce') %>%
dySeries("Predicted", strokeWidth = 1, stepPlot = TRUE, color = 'black') %>%
dyShading(from = datesV[3], to = datesV[4], color = "#CCEBD6") %>%
dyEvent(datesV[2]) %>%
dyEvent(datesV[3], 'Install Period', labelLoc = "top") %>%
dyLegend(width = 400)
}
ebPlot(predictions$J)
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
lapply(c('data.table', 'mlr', 'dygraph'), library, character.only = TRUE)
lapply(c('data.table', 'mlr', 'dygraphs'), library, character.only = TRUE)
ebPlot(predictions$J)
ebPlot(predictions$I)
ebPlot <- function(x){
dat <- copy(x)
setnames(dat, c('elct', 'pElct'), c('Actual', 'Predicted'))
if(compress) dat <- dat[, lapply(.SD, sum),
.SDcols = c('Actual', 'Predicted'),
by = as.POSIXct(trunc.POSIXt(date, 'days', tz = 'UTC'), tz = 'UTC')]
datesV <- c(
min(dat[period == 'baseline', date]),
max(dat[period == 'baseline', date]),
min(dat[period == 'performance', date]),
max(dat[period == 'performance', date]))
dygraph(dat[, .(date, Actual, Predicted)], ylab = 'Daily kWh') %>%
dySeries("Actual", stepPlot = TRUE, fillGraph = TRUE, color = '#4889ce') %>%
dySeries("Predicted", strokeWidth = 1, stepPlot = TRUE, color = 'black') %>%
dyShading(from = datesV[3], to = datesV[4], color = "#CCEBD6") %>%
dyEvent(datesV[2]) %>%
dyEvent(datesV[3], 'Install Period', labelLoc = "top") %>%
dyLegend(width = 400)
}
ebPlot(predictions$I)
ebPlot <- function(x, compress = TRUE){
dat <- copy(x)
setnames(dat, c('elct', 'pElct'), c('Actual', 'Predicted'))
if(compress) dat <- dat[, lapply(.SD, sum),
.SDcols = c('Actual', 'Predicted'),
by = as.POSIXct(trunc.POSIXt(date, 'days', tz = 'UTC'), tz = 'UTC')]
datesV <- c(
min(dat[period == 'baseline', date]),
max(dat[period == 'baseline', date]),
min(dat[period == 'performance', date]),
max(dat[period == 'performance', date]))
dygraph(dat[, .(date, Actual, Predicted)], ylab = 'Daily kWh') %>%
dySeries("Actual", stepPlot = TRUE, fillGraph = TRUE, color = '#4889ce') %>%
dySeries("Predicted", strokeWidth = 1, stepPlot = TRUE, color = 'black') %>%
dyShading(from = datesV[3], to = datesV[4], color = "#CCEBD6") %>%
dyEvent(datesV[2]) %>%
dyEvent(datesV[3], 'Install Period', labelLoc = "top") %>%
dyLegend(width = 400)
}
ebPlot(predictions$I, compress = TRUE)
ebPlot <- function(x, compress = TRUE){
dat <- copy(x)
setnames(dat, c('elct', 'pElct'), c('Actual', 'Predicted'))
datesV <- c(
min(dat[period == 'baseline', date]),
max(dat[period == 'baseline', date]),
min(dat[period == 'performance', date]),
max(dat[period == 'performance', date]))
if(compress) dat <- dat[, lapply(.SD, sum),
.SDcols = c('Actual', 'Predicted'),
by = as.POSIXct(trunc.POSIXt(date, 'days', tz = 'UTC'), tz = 'UTC')]
dygraph(dat[, .(date, Actual, Predicted)], ylab = 'Daily kWh') %>%
dySeries("Actual", stepPlot = TRUE, fillGraph = TRUE, color = '#4889ce') %>%
dySeries("Predicted", strokeWidth = 1, stepPlot = TRUE, color = 'black') %>%
dyShading(from = datesV[3], to = datesV[4], color = "#CCEBD6") %>%
dyEvent(datesV[2]) %>%
dyEvent(datesV[3], 'Install Period', labelLoc = "top") %>%
dyLegend(width = 400)
}
ebPlot(predictions$I, compress = TRUE)
predictions$I[, lapply(.SD, sum),
.SDcols = c('Actual', 'Predicted'),
by = as.POSIXct(trunc.POSIXt(date, 'days', tz = 'UTC'), tz = 'UTC')]
predictions$I
predictions$I[, lapply(.SD, sum),
.SDcols = c('elct', 'pElct'),
by = as.POSIXct(trunc.POSIXt(date, 'days', tz = 'UTC'), tz = 'UTC')]
ebPlot <- function(x, compress = TRUE){
dat <- copy(x)
setnames(dat, c('elct', 'pElct'), c('Actual', 'Predicted'))
datesV <- c(
min(dat[period == 'baseline', date]),
max(dat[period == 'baseline', date]),
min(dat[period == 'performance', date]),
max(dat[period == 'performance', date]))
if(compress) dat <- dat[, lapply(.SD, sum),
.SDcols = c('Actual', 'Predicted'),
by = .(date = as.POSIXct(trunc.POSIXt(date, 'days', tz = 'UTC'), tz = 'UTC'))]
dygraph(dat[, .(date, Actual, Predicted)], ylab = 'Daily kWh') %>%
dySeries("Actual", stepPlot = TRUE, fillGraph = TRUE, color = '#4889ce') %>%
dySeries("Predicted", strokeWidth = 1, stepPlot = TRUE, color = 'black') %>%
dyShading(from = datesV[3], to = datesV[4], color = "#CCEBD6") %>%
dyEvent(datesV[2]) %>%
dyEvent(datesV[3], 'Install Period', labelLoc = "top") %>%
dyLegend(width = 400)
}
ebPlot(predictions$I, compress = TRUE)
ebPlot(predictions$J, compress = TRUE)
ebPlot(predictions$L, compress = TRUE)
ebPlot(predictions$I, compress = TRUE)
ebPlot(predictions$J, compress = TRUE)
ebPlot(predictions$I, compress = FALSE)
ebPlot(predictions$I, compress = TRUE)
ebSummary(predictions, meterDT)
setwd('C:/Users/Andrew/Dropbox/Res-Intel Model/R_Packages/ebase/ebase')
lapply(c('data.table', 'mlr', 'dygraphs'), library, character.only = TRUE)
#library('ebase')
rm(list = ls())
source('R/functions.R')
sampDT <- fread('vignettes/vignetteData.csv')
sampDT[meter == 'J', eventStart:= '2/1/2017']
sampDT[meter == 'J', eventEnd:= '7/1/2017']
useDT <- unique(sampDT[, .(meterID = meter, date, hr = hour, elct = electricity, temp = temperature)])
useDT[, date:= as.POSIXct(paste0(date, ' ', hr), tz = 'UTC', format = '%m/%d/%Y %H')]; useDT[, hr:= NULL]
meterDT <- unique(sampDT[, .(meterID = meter,
inDate = as.POSIXct(install_date, tz = 'UTC', format = '%m/%d/%Y'),
propertyName = 'Playboy Mansion')])
propDT <- unique(sampDT[, .(meterID = meter, propertyName = 'Playboy Mansion')])
# fwrite(propDT, 'properties.csv')
# fwrite(useDT, 'use.csv')
# fwrite(meterDT, 'meter.csv')
#==================================================================
Start <- Sys.time()
# Specify min number of days
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
interval = 'hourly')
ebData
ebModelList <- ebModel(ebDT, type = 'GBoost')
#ebModelList <- ebModel(ebData, 'regression')
predictions <- ebPredict(ebModelList, ebData)
ebSummary(predictions, meterDT)
ebModelList <- ebModel(ebDT, type = 'gboost')
#ebModelList <- ebModel(ebData, 'regression')
predictions <- ebPredict(ebModelList, ebData)
ebSummary(predictions, meterDT)
ebModelList <- ebModel(ebData, type = 'gboost')
#ebModelList <- ebModel(ebData, 'regression')
predictions <- ebPredict(ebModelList, ebData)
ebSummary(predictions, meterDT)
ebModelList
ebData <- ebDataFormat(useDT = useDT,
meterDT = meterDT,
base.length = 24,
date.format = '%m/%d/%Y %H',
padding = 15,
interval = 'hourly')
ebModelList <- ebModel(ebData, type = 'gboost', option = list(nrounds = c(1:4*100)))
#ebModelList <- ebModel(ebData, 'regression')
predictions <- ebPredict(ebModelList, ebData)
ebSummary(predictions, meterDT)
library('devtools')
library('roxygen2')
#### Build
document()
build()
